package com.saveourtool.diktat.demo.controller

import com.saveourtool.diktat.demo.processing.CodeFix
import com.saveourtool.diktat.demo.views.CodeForm
import com.saveourtool.diktat.demo.views.RulesSetTypes

import com.pinterest.ktlint.core.LintError
import com.pinterest.ktlint.core.ParseException
import org.slf4j.LoggerFactory

import java.io.File
import java.util.UUID

/**
 * Main [Controller] for spring boot
 */
class DemoController {
    @Synchronized
    private fun generateFileName(): String = UUID.randomUUID().toString()

    private fun getDemoFile(generatedName: String = generateFileName()): File = File("demo-$generatedName.kt")
    private fun getDemoConfig(generatedName: String = generateFileName()): File = File("diktat-analysis-$generatedName.yml")

    /**
     * @param configLines [String] of yaml config
     * @param generatedName autogenerated name
     * @return temp [File] that contains yaml config
     */
    fun prepareConfigFile(
        configLines: String,
        generatedName: String = generateFileName(),
    ) = getDemoConfig(generatedName).apply {
        writeText(configLines)
    }

    /**
     * @param codeFormHtml
     * @return a page name
     */
    @Suppress("TOO_LONG_FUNCTION")
    fun checkAndFixCode(codeFormHtml: CodeForm): CodeForm {
        val generatedName = generateFileName()
        log.debug("Diktat config: {}", codeFormHtml.diktatConfig)
        val configFile = codeFormHtml.diktatConfig?.let {
            prepareConfigFile(it, generatedName)
        }
        log.debug("Diktat config path: {}", configFile?.path)
        val file = getDemoFile(generatedName)
        file.writeText(codeFormHtml.initialCode!!)
        val codeFix = CodeFix(codeFormHtml.initialCode!!, codeFormHtml.ruleSet[0], configFile?.path)
        val result = runCatching {
            if (codeFormHtml.fix) {
                codeFormHtml.fixedCode = codeFix.fix(file.absolutePath)
            } else if (codeFormHtml.check) {
                codeFormHtml.fixedCode = codeFormHtml.initialCode
                codeFix.check(file.absolutePath)
            }
        }
        when {
            result.isSuccess -> codeFormHtml.warnings = codeFix.listOfWarnings.map { it.prettyFormat(file) }
            result.exceptionOrNull() is ParseException -> codeFormHtml.warnings =
                    listOf(result.exceptionOrNull().toString())
            else -> {
                val issueLink =
                        if (RulesSetTypes.KTLINT in codeFormHtml.ruleSet) "https://github.com/pinterest/ktlint/issues" else "https://github.com/saveourtool/diktat/issues"
                codeFormHtml.warnings = listOf(
                    """
                        |Unhandled exception during tool execution, please create a ticket at $issueLink:
                        |${result.exceptionOrNull()!!.stackTraceToString()}
                    """.trimMargin(),
                )
                log.error("Running formatter returned unexpected exception", result.exceptionOrNull())
            }
        }
        file.delete()
        configFile?.delete()
        return codeFormHtml
    }

    private fun LintError.prettyFormat(file: File) = "Warn ($line:$col) $detail"
        .replace(file.absolutePath, "\"example_file_name\"")

    companion object {
        private val log = LoggerFactory.getLogger(DemoController::class.java)
        private const val PAGE_NAME = "demo"
    }
}
